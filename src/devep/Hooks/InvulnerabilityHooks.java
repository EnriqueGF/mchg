package devep.Hooks;

import dev.triumphteam.gui.builder.item.ItemBuilder;
import dev.triumphteam.gui.guis.Gui;
import dev.triumphteam.gui.guis.GuiItem;
import devep.Game.GameSettings;
import devep.Game.GameStatusEnum;
import net.kyori.adventure.text.Component;
import org.bukkit.Material;
import org.bukkit.entity.Player;
import org.bukkit.entity.Wolf;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;

public class InvulnerabilityHooks implements Listener {

    private GameSettings gameSettings;

    public InvulnerabilityHooks(GameSettings gameSettings) {
        this.gameSettings = gameSettings;
    }

    @EventHandler
    public void onDamage(EntityDamageEvent event) {
        if(gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onEntityDamage(EntityDamageByEntityEvent event){
        if(gameSettings.gameStatus == GameStatusEnum.BEFORE_START || gameSettings.gameStatus == GameStatusEnum.INVULNERABILITY ) {
            if ((event.getDamager() instanceof Player && event.getEntity() instanceof Player) || (event.getEntity() instanceof Wolf)) {
                event.setCancelled(true);
            }
        }
    }

    @EventHandler
    public void onPlayerDropItem(PlayerDropItemEvent event){
        if(gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onEntityPickupItemEvent(EntityPickupItemEvent event){
        if(gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            event.setCancelled(true);
            event.getItem().remove();
        }
    }

    @EventHandler
    public void onBlockBreak(BlockBreakEvent event){
        if(gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            event.setDropItems(false);
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onBlockPlaceEvent(BlockPlaceEvent event){
        if(gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onPlayerInteractRightClickEvent(PlayerInteractEntityEvent event) {
        if(gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onPlayerOpenChest(PlayerInteractEvent event) {
        if(gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            if (event.getClickedBlock() != null) {
                event.setCancelled(true);
            }
        }
    }
}


