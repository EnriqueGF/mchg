package devep.Hooks;

import devep.Game.GameSettings;
import devep.Game.GameStatusEnum;
import org.bukkit.entity.Arrow;
import org.bukkit.entity.EntityType;
import org.bukkit.entity.Player;
import org.bukkit.entity.Wolf;
import org.bukkit.event.EventHandler;
import org.bukkit.event.Listener;
import org.bukkit.event.block.BlockBreakEvent;
import org.bukkit.event.block.BlockPlaceEvent;
import org.bukkit.event.entity.EntityDamageByEntityEvent;
import org.bukkit.event.entity.EntityDamageEvent;
import org.bukkit.event.entity.EntityPickupItemEvent;
import org.bukkit.event.player.PlayerDropItemEvent;
import org.bukkit.event.player.PlayerInteractEntityEvent;
import org.bukkit.event.player.PlayerInteractEvent;

public class InvulnerabilityHooks implements Listener {

    private GameSettings gameSettings;

    public InvulnerabilityHooks(GameSettings gameSettings) {
        this.gameSettings = gameSettings;
    }

    @EventHandler
    public void onDamage(EntityDamageEvent event) {
        if (gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            event.setCancelled(true);
            return;
        }

        if (gameSettings.gameStatus != GameStatusEnum.STARTED && event.getCause() == EntityDamageEvent.DamageCause.ENTITY_EXPLOSION) {
            event.setCancelled(true);
        }

    }

    @EventHandler
    public void onEntityDamage(EntityDamageByEntityEvent event) {

        boolean blockDamage = false;

        if (gameSettings.gameStatus == GameStatusEnum.STARTED) {
            return;
        }

        if (event.getDamager() instanceof Player && event.getEntity() instanceof Player) {
            blockDamage = true;
        }

        if ((event.getDamager() instanceof Arrow && ((Arrow) event.getDamager()).getShooter() instanceof Player)) {
            blockDamage = true;
        }

        if (event.getEntity() instanceof Wolf) {
            blockDamage = true;
        }

        if (event.getEntity() instanceof Player && event.getCause() == EntityDamageEvent.DamageCause.ENTITY_EXPLOSION && event.getDamager().getType() == EntityType.PRIMED_TNT) {
            blockDamage = true;
        }

        event.setCancelled(blockDamage);

    }

    @EventHandler
    public void onPlayerDropItem(PlayerDropItemEvent event) {
        if (gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onEntityPickupItemEvent(EntityPickupItemEvent event) {
        if (gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            event.setCancelled(true);
            event.getItem().remove();
        }
    }

    @EventHandler
    public void onBlockBreak(BlockBreakEvent event) {
        if (gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            event.setDropItems(false);
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onBlockPlaceEvent(BlockPlaceEvent event) {
        if (gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onPlayerInteractRightClickEvent(PlayerInteractEntityEvent event) {
        if (gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            event.setCancelled(true);
        }
    }

    @EventHandler
    public void onPlayerOpenChest(PlayerInteractEvent event) {
        if (gameSettings.gameStatus == GameStatusEnum.BEFORE_START) {
            if (event.getClickedBlock() != null) {
                event.setCancelled(true);
            }
        }
    }
}


